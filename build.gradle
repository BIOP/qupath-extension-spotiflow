plugins {
    id 'java-library'
    id 'maven-publish'
    alias(libs.plugins.javafx)
}

repositories {
    // Use this only for local development!
    //  mavenLocal()
    mavenCentral()
    maven{
        url "https://maven.scijava.org/content/repositories/releases"
    }

    maven{
        url "https://maven.scijava.org/content/repositories/ome-releases"
    }


}


ext.moduleName = 'qupath.extension.spotiflow'
ext.qupathVersion = gradle.ext.qupathVersion

description = 'QuPath extension to use Spotiflow'

version = "0.1.0-rc1"
def bioformatsVersion = libs.versions.bioformats.get()
def versionOverride = project.properties.getOrDefault('bioformats-version', null)
if (versionOverride) {
    println "Using specified Bio-Formats version ${versionOverride}"
    bioformatsVersion = versionOverride
}
dependencies {
    implementation "io.github.qupath:qupath-gui-fx:${qupathVersion}"
    implementation "io.github.qupath:qupath-extension-bioformats:${qupathVersion}"
    implementation libs.qupath.fxtras
    implementation "commons-io:commons-io:2.15.0"
    implementation libs.bundles.logging

    implementation "ome:formats-gpl:${bioformatsVersion}", {
        exclude group: 'xalan', module: 'serializer'
        exclude group: 'xalan', module: 'xalan'
        exclude group: 'io.minio', module: 'minio'
        exclude group: 'cisd', module: 'jhdf5'
        exclude group: 'commons-codec', module: 'commons-codec'
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'edu.ucar', module: 'cdm'
        exclude group: 'edu.ucar', module: 'cdm-core'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
        exclude group: 'com.google.code.findbugs', module: 'annotations'
    }
}

processResources {
    from ("${projectDir}/LICENSE") {
        into 'META-INF/licenses/'
    }
}

tasks.register("copyDependencies", Copy) {
    description "Copy dependencies into the build directory for use elsewhere"
    group "QuPath"

    from configurations.default
    into 'build/libs'
}

/*
 * Ensure Java 17 compatibility
 */
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    if (project.properties['sources'])
        withSourcesJar()
    if (project.properties['javadocs'])
        withJavadocJar()
}

/*
 * Manifest info
 */
jar {
    manifest {
        attributes("Implementation-Title": project.name,
                "Implementation-Version": archiveVersion,
                "Automatic-Module-Name": "io.github." + moduleName)
    }
}

/*
 * Create javadocs for all modules/packages in one place.
 * Use -PstrictJavadoc=true to fail on error with doclint (which is rather strict).
 */
def strictJavadoc = findProperty('strictJavadoc')
if (!strictJavadoc) {
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

javadoc {
    options.addBooleanOption('html5', true)
    destinationDir = new File(project.rootDir,"docs")
}

/*
 * Avoid 'Entry .gitkeep is a duplicate but no duplicate handling strategy has been set.'
 * when using withSourcesJar()
 */
tasks.withType(org.gradle.jvm.tasks.Jar) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.named('test') {
    useJUnitPlatform()
}

publishing {
    repositories {
        maven {
            name = "SciJava"
            def releasesRepoUrl = uri("https://maven.scijava.org/content/repositories/releases")
            def snapshotsRepoUrl = uri("https://maven.scijava.org/content/repositories/snapshots")
            // Use gradle -Prelease publish
            url = project.hasProperty('release') ? releasesRepoUrl : snapshotsRepoUrl
            credentials {
                username = System.getenv("MAVEN_USER")
                password = System.getenv("MAVEN_PASS")
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            groupId = 'io.github.qupath'
            from components.java

            pom {
                licenses {
                    license {
                        name = 'Apache License v2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0'
                    }
                }
            }
        }
    }
}